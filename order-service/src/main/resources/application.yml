server:
  error:
    include-binding-errors: always
    include-message: always
  port: 0
spring:
  datasource:
    type: com.zaxxer.hikari.HikariDataSource
    url: &connectionUrl jdbc:mysql://${DB_CONNECTION_IP:localhost}:${DB_CONNECTION_PORT:3306}/order_service?allowPublicKeyRetrieval=true&createDatabaseIfNotExist=true&useSSL=false&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC&zeroDateTimeBehavior=convertToNull&useUnicode=true&characterEncoding=UTF-8
    username: &username ${DB_CONNECTION_USERNAME:root}
    password: &password ${DB_CONNECTION_PASSWORD:password}
    driver-class-name: com.mysql.cj.jdbc.Driver
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
    properties:
      hibernate:
        format_sql: 'false'
  application:
    name: 'order-service'
  zipkin:
    base-url: http://localhost:9411
  sleuth:
    sampler:
      probability: 1.0
  kafka:
    bootstrap-servers: 'localhost:9092'
    template:
      default-topic: 'notificationTopic'
    producer:
      key-serializer: 'org.apache.kafka.common.serialization.StringSerializer'
      value-serializer: 'org.springframework.kafka.support.serializer.JsonSerializer'
      properties:
        spring:
          json:
            type:
              mapping: 'event:com.nadeer.orderservice.event.OrderPlacedEvent'
eureka:
  client:
    service-url:
      defaultZone: 'http://eureka:password@localhost:8761/eureka'

management:
  health:
    circuitbreakers:
      enabled: true
  endpoints:
    web:
      exposure:
        include: "*"
  endpoint:
    health:
      show-details: always

#Resilience4j Properties
resilience4j:
  circuitbreaker:
    instances:
      inventory:
        register-health-indicator: true
        event-consumer-buffer-size: 10
        sliding-window-type: count_based
        sliding-window-size: 5
        failure-rate-threshold: 50
        wait-duration-in-open-state: '5s'
        permitted-number-of-calls-in-half-open-state: 3
        automatic-transition-from-open-to-half-open-enabled: true
  timelimiter: #Resilience4j Timeout Properties
    instances:
      inventory:
        timeout-duration: 3s
  retry:
    instances:
      inventory:
        max-attempts: 3
        wait-duration: '5s'




